import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Load the MovieLens dataset
movies = pd.read_csv('C:/Users/Yashaswi/Downloads/ml-latest-small/ml-latest-small/movies.csv')
ratings = pd.read_csv('C:/Users/Yashaswi/Downloads/ml-latest-small/ml-latest-small/ratings.csv')

# Preprocessing: Combine genres and create a TF-IDF matrix
movies['genres'] = movies['genres'].str.replace('|', ' ')
tfidf_vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf_vectorizer.fit_transform(movies['genres'])
print(movies['genres'])

# Calculate the cosine similarity between movies
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Build a reverse mapping of movie titles to movie indices
indices = pd.Series(movies.index, index=movies['title']).drop_duplicates()

def recommend_movies(movie_title, num_recommendations=5):
    # Get the index of the input movie
    movie_index = indices[movie_title]

    # Calculate the cosine similarity scores for all movies
    sim_scores = list(enumerate(cosine_sim[movie_index]))

    # Sort movies based on similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the indices of the top-n most similar movies
    top_indices = [i[0] for i in sim_scores[1:num_recommendations + 1]]

    # Get movie titles and return recommendations
    recommended_movies = movies['title'].iloc[top_indices].tolist()
    return recommended_movies

# Example: Recommend movies similar to "Toy Story (1995)"
recommended_movies = recommend_movies(input('enter the movie'))
print("Recommended Movies:")
for movie in recommended_movies:
    print(movie)
